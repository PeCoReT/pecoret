from rest_framework.test import APITestCase
from pecoret.core.test import PeCoReTTestCaseMixin
from backend.models import ProjectVulnerability, CWE


class ProjectVulnerabilityCreateView(APITestCase, PeCoReTTestCaseMixin):
    def setUp(self) -> None:
        self.init_mixin()
        self.url = self.get_url("api:backend:vulnerability-list", project=self.project1.pk)
        self.cwe = self.create_instance(CWE)
        self.data = {"severity": "Critical", "vulnerability_id": "my-new-test-vuln", "description": "test",
                     "recommendation": "test", "name": "test vuln", "cwe": self.cwe.pk}

    def test_pentester1(self):
        self.client.force_login(self.pentester1)
        self.basic_status_code_check(self.url, self.client.post, 201, data=self.data)

    def test_management1(self):
        self.client.force_login(self.management1)
        self.basic_status_code_check(self.url, self.client.post, 201, data=self.data)

    def test_forbidden(self):
        users = [
            self.pentester2, self.management2, self.user1, self.read_only1
        ]
        for user in users:
            self.client.force_login(user)
            self.basic_status_code_check(self.url, self.client.post, 403, data=self.data)


class ProjectVulnerabilityUpdateView(APITestCase, PeCoReTTestCaseMixin):
    # TODO: implement
    def setUp(self) -> None:
        self.init_mixin()


class ProjectVulnerabilityListView(APITestCase, PeCoReTTestCaseMixin):
    def setUp(self) -> None:
        self.init_mixin()
        self.vulnerability1 = self.create_instance(ProjectVulnerability, project=self.project1)
        self.vulnerability2 = self.create_instance(ProjectVulnerability, project=self.project2)
        self.url = self.get_url("api:backend:vulnerability-list", project=self.project1.pk)

    def test_allowed(self):
        users = [
            self.pentester1, self.read_only1, self.management1
        ]
        for user in users:
            self.client.force_login(user)
            response = self.basic_status_code_check(self.url, self.client.get, 200)
            self.assertEqual(response.json()["count"], 1)

    def test_forbidden(self):
        users = [
            self.pentester2, self.management2, self.user1
        ]
        for user in users:
            self.client.force_login(user)
            self.basic_status_code_check(self.url, self.client.get, 403)


class ProjectVulnerabilityDestroyView(APITestCase, PeCoReTTestCaseMixin):
    def setUp(self) -> None:
        self.init_mixin()
        self.vulnerability1 = self.create_instance(ProjectVulnerability, project=self.project1)
        self.url = self.get_url("api:backend:vulnerability-detail", project=self.project1.pk, pk=self.vulnerability1.pk)

    def test_pentester1(self):
        self.client.force_login(self.pentester1)
        self.basic_status_code_check(self.url, self.client.delete, 204)

    def test_management1(self):
        self.client.force_login(self.pentester1)
        self.basic_status_code_check(self.url, self.client.delete, 204)

    def test_forbidden(self):
        users = [
            self.pentester2, self.management2, self.read_only1, self.user1
        ]
        for user in users:
            self.client.force_login(user)
            self.basic_status_code_check(self.url, self.client.delete, 403)
