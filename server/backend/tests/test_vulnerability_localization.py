from rest_framework.test import APITestCase

from backend.models import VulnerabilityTemplate, VulnerabilityTemplateTranslation, ProjectVulnerability
from backend.models.finding import Severity, FindingStatus
from pecoret.core.test import PeCoReTTestCaseMixin


class FindingVulnerabilityTranslation(APITestCase, PeCoReTTestCaseMixin):
    def setUp(self):
        self.init_mixin()
        self.url = self.get_url("api:backend:finding-list", project=self.project1.pk)
        self.template = self.create_instance(VulnerabilityTemplate, name="test-en", vulnerability_id='test')
        self.translation = self.create_instance(VulnerabilityTemplateTranslation, template=self.template,
                                                name="test-de", description="de",
                                                remediation="de", recommendation="de",
                                                language="de")
        self.data = {
            "name": "testfinding",
            "severity": Severity.CRITICAL.label,
            "status": FindingStatus.OPEN.label,
            "recommendation": "",
            "proof_text": "test",
            "imported": False,
            "asset": self.asset1.pk,
            "vulnerability_id": "test",
        }

    def test_finding_create_translation(self):
        self.project1.language = "de"
        self.project1.save()
        self.client.force_login(self.pentester1)
        self.basic_status_code_check(self.url, self.client.post, 201, data=self.data)
        project_vulnerabilities = ProjectVulnerability.objects.for_project(self.project1)
        self.assertEqual(project_vulnerabilities.count(), 1)
        vuln = project_vulnerabilities.first()
        self.assertEqual(vuln.name, 'test-de')
        self.assertEqual(vuln.remediation, 'de')
        self.assertEqual(vuln.recommendation, 'de')
        self.assertEqual(vuln.description, 'de')
