import os
import sys
from pathlib import Path

import yaml
from django.conf import settings
from django.core.management.base import BaseCommand

from backend.models import VulnerabilityTemplate, CWE, VulnerabilityTemplateTranslation
from backend.models.vulnerability import Severity


class Command(BaseCommand):
    help = "Import vulnerability templates from directory"

    def add_arguments(self, parser):
        parser.add_argument("directory")
        parser.add_argument(
            "--clear",
            help="Remove all previously imported vulnerabilities",
            action="store_true",
        )

    def handle(self, *args, **options):
        if options["clear"]:
            VulnerabilityTemplate.objects.all().delete()
        directory = options["directory"]
        self.stdout.write("Importing vulnerability templates...")
        for path in Path(directory).rglob("info.yaml"):
            if "_template/info.yaml" in str(path):
                continue
            self.import_template(path)

    def _get_description(self, filename, language):
        # read description of a template by its locale
        desc_filename = str(filename).replace(
            "info.yaml", "locale/%s/description.md" % language
        )
        if not os.path.exists(desc_filename):
            return sys.stdout.write(
                "No such locale '%s' skipping description..." % language
            )
        with open(desc_filename, "r") as f:
            return f.read()

    def _get_recommendation(self, filename, language):
        desc_filename = str(filename).replace(
            "info.yaml", "locale/%s/recommendation.md" % language
        )
        if not os.path.exists(desc_filename):
            return sys.stdout.write(
                "No such locale '%s' skipping recommendation..." % language
            )
        with open(desc_filename, "r") as f:
            return f.read()

    def import_template(self, filename):
        with open(filename, "r") as f:
            for item in yaml.safe_load(f):
                defaults = {
                    'name': item['locale']['en']['name'],
                    'remediation': item['locale']['en'].get('remediation', ''),
                    'description': self._get_description(filename, 'en'),
                    'recommendation': self._get_recommendation(filename, 'en'),
                    'severity': Severity[item['severity'].upper()]
                }
                template, _created = VulnerabilityTemplate.objects.update_or_create(
                    vulnerability_id=item['id'], defaults=defaults
                )
                for lang in settings.LANGUAGES:
                    if lang[0] == 'en':
                        continue
                    description = self._get_description(filename, lang[0])
                    recommendation = self._get_recommendation(filename, lang[0])
                    name = item['locale'][lang[0]]['name']
                    remediation = item['locale'][lang[0]].get('remediation', '')
                    defaults = {
                        'description': description, 'recommendation': recommendation,
                        'remediation': remediation, 'name': name
                    }
                    try:
                        VulnerabilityTemplateTranslation.objects.update_or_create(
                            template=template, language=lang[0], defaults=defaults)
                    except Exception as e:
                        print(f"Could not create translation {item['id']} due to missing fields.")

                    # add CWE
                    cwe = item.get("cwe")
                    if cwe:
                        try:
                            cwe_id = int(cwe)
                        except Exception:
                            cwe_id = cwe.split("-")[-1]
                        try:
                            cwe = CWE.objects.get(cwe_id=cwe_id)
                            template.cwe = cwe
                        except CWE.DoesNotExist:
                            print(
                                f"[{template.vulnerability_id}]: CWE does not exist: {cwe_id}"
                            )
                    template.save()
