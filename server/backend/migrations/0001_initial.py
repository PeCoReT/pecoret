# Generated by Django 5.2 on 2025-06-29 13:35

import backend.models.company
import backend.models.finding_attachment
import backend.models.project_file
import backend.models.user
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import pecoret.core.models
import pecoret.reporting.utils
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("role", models.CharField(blank=True, max_length=256)),
                ("username", models.CharField(max_length=256)),
                ("password", models.CharField(blank=True, max_length=256)),
                ("accessible", models.BooleanField(blank=True, null=True)),
                ("compromised", models.BooleanField(blank=True, default=False)),
                (
                    "description",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
            ],
            options={
                "ordering": ("-pk",),
            },
        ),
        migrations.CreateModel(
            name="AssetType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the asset type. May be used in your report template.",
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["-date_created", "-date_updated"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=256)),
                ("street", models.CharField(max_length=256)),
                ("zipcode", models.CharField(max_length=256)),
                ("city", models.CharField(max_length=256)),
                ("country", models.CharField(max_length=256)),
                (
                    "report_template",
                    models.CharField(
                        choices=pecoret.reporting.utils.get_report_template_choices,
                        max_length=256,
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        max_length=256,
                        null=True,
                        upload_to=backend.models.company.upload_path,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CWE",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cwe_id", models.IntegerField(unique=True)),
                ("name", models.CharField(max_length=512)),
                ("description", models.TextField()),
                ("extended_description", models.TextField(blank=True)),
                (
                    "entry_type",
                    models.SmallIntegerField(
                        choices=[(0, "Weakness"), (1, "Category")]
                    ),
                ),
            ],
            options={
                "verbose_name": "CWE",
                "verbose_name_plural": "CWEs",
                "ordering": ["cwe_id"],
            },
        ),
        migrations.CreateModel(
            name="PentestType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=64, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-date_created"],
            },
        ),
        migrations.CreateModel(
            name="Technology",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=256, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("cpe", models.CharField(max_length=256, null=True)),
                ("homepage", models.URLField(blank=True, null=True)),
                ("vendor", models.CharField(max_length=256, null=True)),
                ("source_code_url", models.URLField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name", "-date_updated"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("new_email", models.EmailField(blank=True, max_length=254, null=True)),
                ("nickname", models.CharField(max_length=64, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.company",
                    ),
                ),
            ],
            options={
                "ordering": ["username"],
            },
            managers=[
                ("objects", backend.models.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Asset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "accessible",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Accessible"),
                            (1, "Not Accessible"),
                            (2, "Unknown"),
                        ],
                        default=2,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "environment",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Unknown"),
                            (1, "Production"),
                            (2, "Testing"),
                            (3, "Development"),
                            (4, "Staging"),
                        ],
                        default=0,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "asset_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="backend.assettype",
                    ),
                ),
            ],
            options={
                "ordering": ["-date_updated", "name"],
            },
        ),
        migrations.CreateModel(
            name="CompanyContact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("first_name", models.CharField(max_length=128)),
                ("last_name", models.CharField(max_length=128)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("phone", models.CharField(max_length=28)),
                ("role", models.CharField(max_length=128)),
                ("pgp_public_key", models.TextField(blank=True, null=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.company",
                    ),
                ),
            ],
            options={
                "ordering": ["first_name", "last_name"],
                "unique_together": {("first_name", "last_name", "company")},
            },
        ),
        migrations.CreateModel(
            name="CompanyInformation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("text", models.TextField()),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="backend.company",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=pecoret.core.models.CASCADE_USER_TO_GHOST,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_edit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=pecoret.core.models.CASCADE_USER_TO_GHOST,
                        related_name="companyinformation_user_edit_set",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-date_created", "-date_updated"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CustomFieldAsset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="the name of the field", max_length=255, unique=True
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="the display label for the field", max_length=255
                    ),
                ),
                (
                    "help_text",
                    models.TextField(
                        blank=True,
                        help_text="shown as help text on the field",
                        null=True,
                    ),
                ),
                (
                    "field_type",
                    models.PositiveIntegerField(
                        choices=[
                            (0, "char"),
                            (1, "text"),
                            (2, "integer"),
                            (3, "ip"),
                            (4, "url"),
                        ]
                    ),
                ),
                (
                    "max_length",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="the maximum chars of the field",
                        null=True,
                    ),
                ),
                (
                    "required",
                    models.BooleanField(
                        default=False, help_text="whether the field is required"
                    ),
                ),
                (
                    "allow_markdown",
                    models.BooleanField(
                        default=False,
                        help_text="whether the field is allowed to be markdown",
                    ),
                ),
                (
                    "ordering",
                    models.PositiveIntegerField(
                        default=5, help_text="the ordering of the field"
                    ),
                ),
                (
                    "asset_types",
                    models.ManyToManyField(blank=True, to="backend.assettype"),
                ),
            ],
            options={
                "ordering": ["ordering"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Finding",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "severity",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Informational"),
                            (1, "Low"),
                            (2, "Medium"),
                            (3, "High"),
                            (4, "Critical"),
                        ]
                    ),
                ),
                ("recommendation", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Open"), (1, "Fixed"), (2, "Wont Fix")], default=0
                    ),
                ),
                ("imported", models.BooleanField(default=False)),
                ("finding_date", models.DateField(blank=True, default=None, null=True)),
                ("name", models.CharField(max_length=256)),
                ("needs_review", models.BooleanField(default=False)),
                ("exclude_from_report", models.BooleanField(default=False)),
                ("date_retest", models.DateField(blank=True, null=True)),
                ("retest_results", models.TextField(blank=True, null=True)),
                ("proof_text", models.TextField(blank=True, default="")),
                (
                    "cvss_score_40",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="CVSS:4\\.0\\/AV:[N|A|L|P]\\/AC:[L|H]\\/AT:[N|P]\\/PR:[N|L|H]\\/UI:[N|P|A]\\/VC:[H|L|N]\\/VI:[H|L|N]\\/VA:[H|L|N]\\/SC:[H|L|N]\\/SI:[H|L|N]\\/SA:[H|L|N]"
                            )
                        ],
                    ),
                ),
                (
                    "cvss_score_31",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="CVSS:3\\.1/AV:[N|A|L|P]/AC:[L|H]/PR:[N|L|H]/UI:[N|R]/S:[C|U]/C:[N|L|H]/I:[N|L|H]/A:[N|L|H]"
                            )
                        ],
                    ),
                ),
                ("unique_id", models.CharField(blank=True, max_length=16)),
                (
                    "entrypoint",
                    models.CharField(
                        blank=True,
                        help_text="expected to be a URI",
                        max_length=255,
                        null=True,
                        validators=[django.core.validators.URLValidator()],
                    ),
                ),
                (
                    "asset",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.asset",
                    ),
                ),
                ("cwe_ids", models.ManyToManyField(blank=True, to="backend.cwe")),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_account",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="backend.account",
                    ),
                ),
            ],
            options={
                "ordering": ["-severity"],
            },
        ),
        migrations.CreateModel(
            name="FindingComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("comment", models.TextField()),
                (
                    "finding",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.finding",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=pecoret.core.models.CASCADE_USER_TO_GHOST,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_edit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=pecoret.core.models.CASCADE_USER_TO_GHOST,
                        related_name="finding_comment_edited_set",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["date_created"],
            },
        ),
        migrations.CreateModel(
            name="FindingImageAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "image",
                    models.ImageField(
                        max_length=256,
                        upload_to=backend.models.finding_attachment.finding_upload_path,
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                (
                    "finding",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.finding",
                    ),
                ),
            ],
            options={
                "ordering": ["-date_updated"],
            },
        ),
        migrations.CreateModel(
            name="FindingTimeline",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("is_system_log", models.BooleanField(default=False)),
                ("title", models.CharField(max_length=128)),
                ("text", models.TextField()),
                (
                    "finding",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.finding",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-date_created"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("name", models.CharField(max_length=254, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Open"), (1, "Closed")], default=0
                    ),
                ),
                (
                    "test_method",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "White Box"),
                            (1, "Grey Box"),
                            (2, "Black Box"),
                            (3, "Unknown"),
                        ]
                    ),
                ),
                (
                    "year",
                    models.PositiveIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "require_cvss_score",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[(0, "CVSS 4.0 Base"), (1, "CVSS 3.1 Base")],
                        null=True,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "English"), ("de", "German")],
                        default="en",
                        max_length=4,
                    ),
                ),
                (
                    "visibility",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Members Only"), (1, "Pentesters")], default=0
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="backend.company",
                    ),
                ),
                ("project_types", models.ManyToManyField(to="backend.pentesttype")),
            ],
            options={
                "ordering": ["-date_created", "-date_updated"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="finding",
            name="project",
            field=models.ForeignKey(
                editable=False,
                on_delete=django.db.models.deletion.CASCADE,
                to="backend.project",
            ),
        ),
        migrations.AddField(
            model_name="asset",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="backend.project"
            ),
        ),
        migrations.CreateModel(
            name="APIToken",
            fields=[
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_last_used", models.DateTimeField(blank=True, null=True)),
                ("date_expire", models.DateTimeField(blank=True, null=True)),
                (
                    "prefix",
                    models.CharField(
                        editable=False, max_length=64, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                ("key", models.CharField(editable=False, max_length=255)),
                (
                    "scope_advisories",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "No Access"), (1, "Read"), (2, "Read Write")],
                        default=0,
                    ),
                ),
                (
                    "scope_companies",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "No Access"), (1, "Read"), (2, "Read Write")],
                        default=0,
                    ),
                ),
                (
                    "scope_all_projects",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "No Access"), (1, "Read"), (2, "Read Write")],
                        default=0,
                    ),
                ),
                (
                    "scope_user",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "No Access"), (1, "Read"), (2, "Read Write")],
                        default=0,
                    ),
                ),
                (
                    "scope_attack_surface",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "No Access"), (1, "Read"), (2, "Read Write")],
                        default=0,
                    ),
                ),
                (
                    "scope_knowledgebase",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "No Access"), (1, "Read"), (2, "Read Write")],
                        default=0,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.project",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="account",
            name="project",
            field=models.ForeignKey(
                editable=False,
                on_delete=django.db.models.deletion.CASCADE,
                to="backend.project",
            ),
        ),
        migrations.CreateModel(
            name="ProjectCommand",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("command", models.CharField(max_length=512)),
                ("date_run", models.DateTimeField(default=django.utils.timezone.now)),
                ("output", models.TextField()),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.project",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["project", "date_run"],
            },
        ),
        migrations.CreateModel(
            name="ProjectScope",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "permission",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Denied"), (1, "Allowed")]
                    ),
                ),
                ("details", models.CharField(max_length=256)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.project",
                    ),
                ),
            ],
            options={
                "ordering": ["pk"],
            },
        ),
        migrations.CreateModel(
            name="ProjectVulnerability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("vulnerability_id", models.CharField(max_length=254)),
                (
                    "severity",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Informational"),
                            (1, "Low"),
                            (2, "Medium"),
                            (3, "High"),
                            (4, "Critical"),
                        ]
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=128)),
                ("description", models.TextField()),
                ("recommendation", models.TextField()),
                ("remediation", models.CharField(blank=True, max_length=1024)),
                (
                    "cwe",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="backend.cwe",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.project",
                    ),
                ),
            ],
            options={
                "verbose_name": "Project Vulnerability",
                "verbose_name_plural": "Project Vulnerabilities",
                "ordering": ["-severity"],
            },
        ),
        migrations.AddField(
            model_name="finding",
            name="vulnerability",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="backend.projectvulnerability",
            ),
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=128)),
                ("title", models.CharField(default="Pentest Report", max_length=128)),
                ("recommendation", models.TextField(blank=True, null=True)),
                ("evaluation", models.TextField(blank=True, null=True)),
                (
                    "template",
                    models.CharField(
                        choices=pecoret.reporting.utils.get_report_template_choices,
                        max_length=128,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.project",
                    ),
                ),
            ],
            options={
                "ordering": ["-date_created"],
            },
        ),
        migrations.CreateModel(
            name="ReportRelease",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=128)),
                ("raw_source", models.TextField(blank=True, null=True)),
                ("compiled_source", models.BinaryField(blank=True, null=True)),
                (
                    "release_type",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Draft"), (1, "Final"), (2, "Preview")]
                    ),
                ),
                ("task_id", models.CharField(blank=True, max_length=64, null=True)),
                (
                    "content_type",
                    models.CharField(
                        default="application/octet-stream", max_length=128
                    ),
                ),
                ("file_extension", models.CharField(default="pdf", max_length=12)),
                (
                    "report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="backend.report"
                    ),
                ),
            ],
            options={
                "ordering": ["-date_created", "-date_updated"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="asset",
            name="technologies",
            field=models.ManyToManyField(blank=True, to="backend.technology"),
        ),
        migrations.CreateModel(
            name="VulnerabilityTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "severity",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Informational"),
                            (1, "Low"),
                            (2, "Medium"),
                            (3, "High"),
                            (4, "Critical"),
                        ]
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=128)),
                ("description", models.TextField()),
                ("recommendation", models.TextField()),
                ("remediation", models.CharField(blank=True, max_length=1024)),
                ("vulnerability_id", models.CharField(max_length=254, unique=True)),
                (
                    "cwe",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="backend.cwe",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vulnerability Template",
                "verbose_name_plural": "Vulnerability Templates",
                "ordering": ["-vulnerability_id"],
            },
        ),
        migrations.AddField(
            model_name="projectvulnerability",
            name="template",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="backend.vulnerabilitytemplate",
            ),
        ),
        migrations.CreateModel(
            name="CustomFieldAssetValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("value", models.TextField(blank=True, null=True)),
                (
                    "asset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="backend.asset"
                    ),
                ),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.customfieldasset",
                    ),
                ),
            ],
            options={
                "ordering": ["-date_created"],
                "unique_together": {("asset", "field")},
            },
        ),
        migrations.CreateModel(
            name="ObjectLock",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_seen", models.DateTimeField(auto_now_add=True)),
                ("last_seen", models.DateTimeField(auto_now=True)),
                ("object_id", models.PositiveSmallIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        limit_choices_to=models.Q(
                            ("app_label", "backend"), ("model", "projectnote")
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-last_seen"],
                "indexes": [
                    models.Index(
                        fields=["content_type", "object_id"],
                        name="backend_obj_content_48fb8c_idx",
                    )
                ],
                "unique_together": {("content_type", "object_id")},
            },
        ),
        migrations.CreateModel(
            name="PinnedProject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.project",
                    ),
                ),
            ],
            options={
                "ordering": ["-project__name"],
                "unique_together": {("project", "user")},
            },
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "role",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Project Leader"),
                            (1, "Contributor"),
                            (2, "Read Only"),
                            (3, "Customer"),
                            (4, "Owner"),
                        ],
                        default=1,
                    ),
                ),
                (
                    "active_until",
                    models.DateTimeField(blank=True, default=None, null=True),
                ),
                ("display_in_report", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.project",
                    ),
                ),
            ],
            options={
                "ordering": ["-date_created"],
                "unique_together": {("user", "project")},
            },
        ),
        migrations.CreateModel(
            name="ProjectContact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "contact",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="backend.companycontact",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.project",
                    ),
                ),
            ],
            options={
                "ordering": ["-date_created", "-date_updated"],
                "unique_together": {("contact", "project")},
            },
        ),
        migrations.CreateModel(
            name="ProjectFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=128)),
                (
                    "file",
                    models.FileField(
                        upload_to=backend.models.project_file.project_file_path
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.project",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "unique_together": {("project", "name")},
            },
        ),
        migrations.CreateModel(
            name="ProjectNote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=64)),
                ("text", models.TextField(blank=True, default="")),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.project",
                    ),
                ),
            ],
            options={
                "ordering": ["title"],
                "unique_together": {("project", "title")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="finding",
            unique_together={("unique_id", "project")},
        ),
        migrations.CreateModel(
            name="ChangeHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("version", models.FloatField()),
                ("date", models.DateField()),
                ("change", models.CharField(max_length=128)),
                (
                    "report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="backend.report"
                    ),
                ),
            ],
            options={
                "ordering": ["version"],
                "unique_together": {("report", "version")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="asset",
            unique_together={("name", "project")},
        ),
        migrations.AlterUniqueTogether(
            name="projectvulnerability",
            unique_together={("project", "name"), ("project", "vulnerability_id")},
        ),
        migrations.CreateModel(
            name="VulnerabilityTemplateTranslation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "English"), ("de", "German")], max_length=4
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                ("description", models.TextField()),
                ("recommendation", models.TextField()),
                ("remediation", models.CharField(max_length=1024)),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translations",
                        to="backend.vulnerabilitytemplate",
                    ),
                ),
            ],
            options={
                "unique_together": {("language", "template")},
            },
        ),
    ]
