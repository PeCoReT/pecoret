# Generated by Django 5.2 on 2025-06-29 13:35

import attack_surface.models.finding
import django.core.validators
import secrets
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ASN",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("country", models.CharField(max_length=255)),
                ("country_code", models.CharField(max_length=8)),
                ("region", models.CharField(max_length=255)),
                ("region_name", models.CharField(max_length=255)),
                ("city", models.CharField(max_length=255)),
                ("zipcode", models.CharField(blank=True, max_length=32, null=True)),
                ("timezone", models.CharField(blank=True, max_length=128, null=True)),
                ("isp", models.CharField(blank=True, max_length=255, null=True)),
                ("organization", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255)),
                (
                    "value",
                    models.CharField(
                        max_length=32,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(regex="^AS[0-9]+$")
                        ],
                    ),
                ),
            ],
            options={
                "ordering": ["value"],
            },
        ),
        migrations.CreateModel(
            name="Finding",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("locked_date", models.DateTimeField(blank=True, null=True)),
                (
                    "finding_id",
                    models.CharField(
                        default=attack_surface.models.finding.create_finding_id,
                        max_length=128,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("recommendation", models.TextField(blank=True, null=True)),
                (
                    "severity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (0, "Informational"),
                            (1, "Low"),
                            (2, "Medium"),
                            (3, "High"),
                            (4, "Critical"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "cvss_score",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="CVSS:3\\.1/AV:[N|A|L|P]/AC:[L|H]/PR:[N|L|H]/UI:[N|R]/S:[C|U]/C:[N|L|H]/I:[N|L|H]/A:[N|L|H]"
                            )
                        ],
                    ),
                ),
                (
                    "internal_notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal Notes should not be exposed in custom templates",
                        null=True,
                    ),
                ),
                ("exploitation_details", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Draft"), (1, "Review Required"), (2, "Final")],
                        default=0,
                    ),
                ),
            ],
            options={
                "ordering": ["-date_created", "title"],
            },
        ),
        migrations.CreateModel(
            name="FindingComponent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "data",
                    models.CharField(
                        max_length=512,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_generic_url",
                                message="Enter a valid URL with a valid scheme (e.g. scheme://host[:port][/path]).",
                                regex="^[a-zA-Z][a-zA-Z0-9+.-]*://(([a-zA-Z0-9.-]+)|(\\d{1,3}(\\.\\d{1,3}){3}))(:\\d+)?(/[^\\s]*)?$",
                            )
                        ],
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Vulnerable"), (1, "Fixed"), (2, "Wont Fix")],
                        default=0,
                    ),
                ),
            ],
            options={
                "ordering": ["-date_updated"],
            },
        ),
        migrations.CreateModel(
            name="Program",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=128, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-name"],
            },
        ),
        migrations.CreateModel(
            name="ScanFinding",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("tool", models.CharField(max_length=128)),
                ("name", models.CharField(max_length=512)),
                ("affected_component", models.CharField(max_length=1024)),
                ("result", models.TextField()),
                ("full_output", models.TextField(blank=True, null=True)),
                ("false_positive", models.BooleanField(default=False)),
                ("comment", models.TextField(blank=True, null=True)),
                (
                    "severity",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Informational"),
                            (1, "Low"),
                            (2, "Medium"),
                            (3, "High"),
                            (4, "Critical"),
                        ]
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Open"), (2, "Closed")], default=0
                    ),
                ),
                ("ignore_until", models.DateField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-date_created", "-severity"],
            },
        ),
        migrations.CreateModel(
            name="Scanner",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("last_seen", models.DateTimeField(blank=True, null=True)),
                (
                    "token",
                    models.CharField(
                        default=secrets.token_urlsafe, editable=False, max_length=255
                    ),
                ),
            ],
            options={
                "ordering": ["-last_seen"],
            },
        ),
        migrations.CreateModel(
            name="Scope",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "ordering": ["name", "-date_created"],
            },
        ),
        migrations.CreateModel(
            name="ScopeItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("value", models.TextField()),
                (
                    "category",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Domain"), (1, "Keyword"), (2, "Mail")]
                    ),
                ),
                (
                    "results_in",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Include"), (1, "Exclude")]
                    ),
                ),
                ("annotation", models.CharField(blank=True, max_length=255, null=True)),
                ("is_regex", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "port_number",
                    models.PositiveSmallIntegerField(
                        db_index=True,
                        validators=[django.core.validators.MaxValueValidator(65535)],
                    ),
                ),
                (
                    "service_name",
                    models.CharField(
                        max_length=32,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[a-zA-Z0-9]+$"
                            )
                        ],
                    ),
                ),
                (
                    "protocol",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "TCP"), (1, "UDP")], db_index=True, default=0
                    ),
                ),
                (
                    "uses_encryption",
                    models.BooleanField(
                        default=False, help_text="Uses TLS/SSL encryption"
                    ),
                ),
                (
                    "port_status",
                    models.PositiveIntegerField(
                        choices=[(0, "Open"), (1, "Closed")], default=0
                    ),
                ),
                ("banner", models.TextField(blank=True, null=True)),
                (
                    "cert_issuer",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "cert_subject",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("cert_valid_from", models.DateTimeField(blank=True, null=True)),
                ("cert_expiry", models.DateTimeField(blank=True, null=True)),
                (
                    "cert_fingerprint",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "cert_public_key_info",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("cert_san", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-date_updated"],
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=128, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "color",
                    models.CharField(
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="#([a-fA-F\\d]{6}|[a-fA-F\\d]{3})"
                            )
                        ],
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Target",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("data", models.CharField(db_index=True, max_length=512)),
                (
                    "scope",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "In Scope"),
                            (1, "Undefined"),
                            (2, "Out of Scope"),
                        ],
                        default=1,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "data_type",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "IP"), (2, "Domain"), (3, "Subdomain")]
                    ),
                ),
                ("resolved_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("date_asn_last_updated", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-date_updated", "data"],
            },
        ),
        migrations.CreateModel(
            name="URL",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("url", models.URLField(db_index=True)),
                ("request", models.TextField(blank=True, null=True)),
                ("response", models.TextField(blank=True, null=True)),
                (
                    "status_code",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                ("is_base", models.BooleanField(editable=False)),
                (
                    "favicon_hash",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                (
                    "fuzzy_hash_body",
                    models.CharField(blank=True, max_length=512, null=True),
                ),
                (
                    "fuzzy_hash_headers",
                    models.CharField(blank=True, max_length=512, null=True),
                ),
                ("body_hash", models.CharField(blank=True, max_length=512, null=True)),
                ("title", models.CharField(blank=True, max_length=1024, null=True)),
            ],
            options={
                "ordering": ["-date_updated", "url"],
            },
        ),
        migrations.CreateModel(
            name="UserSearchQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("query", models.CharField(max_length=1024)),
                ("name", models.CharField(max_length=28)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
    ]
