# Generated by Django 5.2 on 2025-06-29 13:35

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("attack_surface", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ScanTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Human-readable name for the scan template (e.g., External ASN Lookup)",
                        max_length=100,
                    ),
                ),
                (
                    "scan_type",
                    models.CharField(
                        help_text="Type of scan being performed", max_length=50
                    ),
                ),
                (
                    "input_type",
                    models.CharField(
                        choices=[
                            ("services", "Services"),
                            ("targets", "Targets"),
                            ("urls", "Urls"),
                            ("programs", "Programs"),
                        ],
                        help_text="Type of object this scan runs on (Target, Service, or URL)",
                        max_length=32,
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        choices=[(1, "manual"), (2, "event"), (3, "scheduled")],
                        default=1,
                        help_text="Scan dispatch priority: manual > event > scheduler",
                    ),
                ),
                (
                    "cooldown",
                    models.DurationField(
                        help_text="Minimum interval before the same object can be scanned again with this template (e.g., 3 days)"
                    ),
                ),
                (
                    "rate_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Optional: max number of scans allowed for this template per 24h window",
                        null=True,
                    ),
                ),
                (
                    "batch_threshold",
                    models.PositiveIntegerField(
                        default=10,
                        help_text="Minimum number of input items required to trigger a batch",
                    ),
                ),
                (
                    "trickle_delay",
                    models.DurationField(
                        blank=True,
                        help_text="Optional: max delay before dispatching a scan even if batch threshold is not met",
                        null=True,
                    ),
                ),
                (
                    "is_discovery_scan",
                    models.BooleanField(
                        default=False,
                        help_text="Set True if this scan may discover new assets (will enforce single-program batches)",
                    ),
                ),
                (
                    "enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Controls whether this scan template is active and eligible for dispatch",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional longer description of what the scan does or when it is used",
                    ),
                ),
                (
                    "scanner_config",
                    models.JSONField(
                        blank=True, default=dict, help_text="Optional scanner config"
                    ),
                ),
                (
                    "conditions",
                    models.TextField(
                        blank=True, help_text="Optional django-q2 filters", null=True
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Scan Templates",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="ScanRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "event_type",
                    models.CharField(
                        max_length=32,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[a-z0-9-.:]+$"
                            )
                        ],
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "scan_templates",
                    models.ManyToManyField(blank=True, to="scanning.scantemplate"),
                ),
            ],
            options={
                "verbose_name_plural": "Scan Rules",
                "ordering": ["-date_created"],
            },
        ),
        migrations.CreateModel(
            name="ScanBatchRequest",
            fields=[
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Pending"),
                            (1, "In Progress"),
                            (2, "Completed"),
                            (3, "Failed"),
                            (4, "Requeued"),
                            (5, "Staging"),
                        ],
                        db_index=True,
                        default=5,
                    ),
                ),
                (
                    "batch_start_time",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "batch_end_time",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "scan_trigger_source",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Manual"),
                            (1, "Scheduled"),
                            (2, "Event"),
                            (3, "Continuous"),
                        ],
                        default=0,
                    ),
                ),
                ("is_discovery_scan", models.BooleanField(default=False)),
                ("date_last_item_added", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
                ("raw_output", models.TextField(blank=True, null=True)),
                ("errors", models.TextField(blank=True, null=True)),
                (
                    "programs",
                    models.ManyToManyField(
                        blank=True,
                        related_name="scan_batches",
                        to="attack_surface.program",
                    ),
                ),
                (
                    "services",
                    models.ManyToManyField(
                        blank=True,
                        related_name="scan_batches",
                        to="attack_surface.service",
                    ),
                ),
                (
                    "targets",
                    models.ManyToManyField(
                        blank=True,
                        related_name="scan_batches",
                        to="attack_surface.target",
                    ),
                ),
                (
                    "triggered_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "urls",
                    models.ManyToManyField(
                        blank=True, related_name="scan_batches", to="attack_surface.url"
                    ),
                ),
                (
                    "scan_template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scanning.scantemplate",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Scan Batch Requests",
                "ordering": ["-date_created"],
            },
        ),
        migrations.CreateModel(
            name="ExclusionRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("exclusion_reason", models.TextField(blank=True, null=True)),
                (
                    "program",
                    models.ForeignKey(
                        blank=True,
                        help_text="excluding a program, will automatically exclude all related items",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="attack_surface.program",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="attack_surface.service",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="attack_surface.target",
                    ),
                ),
                (
                    "url",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="attack_surface.url",
                    ),
                ),
                (
                    "scan_templates",
                    models.ManyToManyField(blank=True, to="scanning.scantemplate"),
                ),
            ],
            options={
                "verbose_name_plural": "Exclusion Rules",
                "unique_together": {("program", "target", "service", "url")},
            },
        ),
    ]
